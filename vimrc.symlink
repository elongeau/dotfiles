set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
if has("win32")
  let MYVIMRC=$HOME . "/_vimrc"
  set rtp+=~/vimfiles/bundle/Vundle.vim
  call vundle#begin('~/vimfiles/bundle/')
  " let g:seoul256_background = 233
  let g:theme="gruvbox"
else
  let MYVIMRC=$HOME . "/.vimrc"
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin('~/.vim/bundle/')
  " let g:theme="base16-eighties"
  let g:theme="gruvbox"
endif

" alternatively, pass a path where Vundle should install Plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'
Plugin 'junegunn/seoul256.vim'
Plugin 'morhetz/gruvbox'
Plugin 'tpope/vim-fugitive'
Plugin 'jtratner/vim-flavored-markdown.git'
Plugin 'yggdroot/indentline'
Plugin 'ekalinin/dockerfile.vim'
Plugin 'tpope/vim-surround'
Plugin 'bling/vim-airline'
Plugin 'lokaltog/vim-easymotion'
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'reedes/vim-colors-pencil'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'terryma/vim-expand-region'
Plugin 'kien/ctrlp.vim'
Plugin 'rhysd/committia.vim'
Plugin 'dagwieers/asciidoc-vim'
Plugin 'mhinz/vim-startify'
Plugin 'vim-scripts/groovy.vim'
Plugin 'tfnico/vim-gradle'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" Affichage {{{
" VIM Configuration - Emmanuel LONGEAU
set title " Met a jour le titre de votre fenetre ou de votre terminal
set number " Affiche le numero des lignes
set relativenumber
set ruler " Affiche la position actuelle du curseur
set scrolloff=3 " Affiche un minimum de 3 lignes autour du curseur (pour le scroll)
set wildmenu            " visual autocomplete for command menu
" }}}
" Recherche {{{
set ignorecase " Ignore la casse lors d?une recherche
set smartcase " Si une recherche contient une majuscule, re-active la sensibilite a la casse
set incsearch " Surligne les resultats de recherche pendant la saisie
set hlsearch " Surligne les resultats de recherche
" }}}
" Divers {{{
set visualbell " Empeche Vim de beeper
set noerrorbells " Empeche Vim de beeper
" Active le comportement ?habituel? de la touche retour en arriere
set backspace=indent,eol,start
" Cache les fichiers lors de l?ouverture d?autres fichiers
set hidden
set autoread			"Reload files changed outside vim
" Ignore these directories
set wildignore+=*/build/**
set wildignore+=*/target/**
if has("win32")
  set wildignore+=/cygdrive/**
endif
" }}}
" Syntaxe {{{
" Active la coloration syntaxique
syntax enable
syntax on
" }}}
" Raccourci {{{
:let mapleader = "\<Space>"

" region expanding
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Copier/coller system
nmap <silent><Leader>p :set paste<CR>p :set nopaste<CR>

" Rechercher et remplacer
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

nnoremap <leader>x :set syntax=xml<CR>
nnoremap <leader>rs :%s/\s\+$//<CR>
" ============== Fonctions ==================

function! MultiScroll(OnOff)
if a:OnOff == 1
  noremap j 5j
  noremap k 5k
else
  noremap j j
  noremap k k
endif
endfunction

" ========= Motion ==========
inoremap jk <Esc>
imap <Esc> <nop>
nnoremap j gj
nnoremap k gk
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Scroll plus rapide
nnoremap <leader>j :call MultiScroll(1)<RETURN>
nnoremap <leader>k :call MultiScroll(0)<RETURN>

inoremap <C-w> <esc>:w<RETURN>a
nnoremap <leader>v :execute "e " .MYVIMRC<RETURN>

" ====== move between splits =====
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-h> <C-W><C-H>

nnoremap <leader>nn :enew<RETURN>

" ======== Files =========
" ouvre un fichier dans le HOME
nnoremap oh :e ~/
" recharge le fichier courant dans vim
noremap <silent><buffer> <F5> :exec 'source '.bufname('%')<CR>
nnoremap <silent>so :so $MYVIMRC<CR>

" ======= Buffer =========
nnoremap <leader>n :bn<RETURN>
nnoremap <leader>q :bd<CR>
nnoremap <leader>z :bd!<CR>

" ====== save & exit ======
nnoremap <leader><leader>q :q<CR>
nnoremap <leader><leader>z :q!<CR>
nnoremap <silent><leader>w :w<CR>
nnoremap <silent>wq :wq<CR>

" ======= Numbers =======
" to an easily access of numbers with command on a french keyboad
nnoremap & 1
nnoremap é 2
nnoremap " 3
nnoremap ' 4
nnoremap ( 5
nnoremap - 6
nnoremap è 7
nnoremap _ 8
nnoremap ç 9
nnoremap à 0
nnoremap = +


" }}}
" Autocommand {{{
" automatically reloadMYVIMRC when it's saved
autocmd! bufwritepost MYVIMRC source %
autocmd BufEnter * :syntax sync fromstart
" }}}
" Backup {{{
set nobackup
set noswapfile
" }}}
" Indentation {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

filetype plugin on
filetype indent on

set nowrap       "Don't wrap lines
set linebreak
set nolist  " list disables linebreak
set linebreak    "Wrap lines at convenient points
" }}}
" Folding {{{
"=== folding ===
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
nnoremap <space> za
set foldlevelstart=10    " start with fold level of 1
" }}}" Completion {{{

set wildmode=longest,list,full
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" }}}
" Scrolling {{{
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1
" }}}
" Session {{{
let g:session_autosave="yes"
let g:session_autoload="yes"
" }}}
" GUI {{{
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

" vertical line indentation
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = '¦'
" }}}
" Theme {{{
set t_Co=256
set background=dark
set antialias

set encoding=utf-8
set fileencoding=utf-8
set guifont=Fantasque\ Sans\ Mono:h16

execute 'colorscheme '.g:theme

function! SetDefaultTheme()
  set background=dark
  execute 'colorscheme '.g:theme
  let g:airline_theme = 'gruvbox'
  set nowrap       "Don't wrap lines
endfunction

function! SetMarkDownTheme()
  colorscheme pencil
  set background=light
  let g:airline_theme = 'pencil'
  set wrap
endfunction

autocmd BufEnter * call SetDefaultTheme()
autocmd BufEnter *.md call SetMarkDownTheme()
" }}}
" Clipboard {{{
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Use system clipboard
set clipboard=unnamed
" }}}
" Airline {{{
let g:airline_section_b = '%{strftime("%c")}'
set laststatus=2
let g:airline_powerline_fonts = 1
"powerline symbols
let g:Powerline_symbols="fancy"
let g:airline_section_z = ' %l / %L : %c '
" let g:airline#extensions#tabline#enabled = 1
" }}}
" Markdown {{{
" disable folding
let g:vim_markdown_folding_disabled=1
let g:table_mode_corner="|"
" }}}
" Auto command {{{
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END
" }}}
" CtrlP {{{
nnoremap <C-m> :CtrlPMRU<CR>
nnoremap <C-b> :CtrlPBuffer<CR>
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
" disable caching
let g:ctrlp_use_caching=0
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]\.(git|hg|svn)$|/cygdrive$',
	\ 'file': '\v\.(exe|so|dll)$',
	\ }
" }}}
" vim:foldmethod=marker:foldlevel=0
